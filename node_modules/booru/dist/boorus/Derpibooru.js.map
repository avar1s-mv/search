{"version":3,"file":"Derpibooru.js","sourceRoot":"","sources":["../../src/boorus/Derpibooru.ts"],"names":[],"mappings":";AAAA;;;GAGG;;;;;AAEH,4CAAyC;AAGzC,oDAA2B;AAE3B;;;;;;GAMG;AACH,MAAqB,UAAW,SAAQ,eAAK;IAC3C,kBAAkB;IACF,MAAM,CACpB,IAAuB,EACvB,EAAE,KAAK,GAAG,CAAC,EAAE,MAAM,GAAG,KAAK,EAAE,IAAI,GAAG,CAAC,KAAuB,EAAE;QAE9D,MAAM,QAAQ,GAAG,IAAI,CAAC,aAAa,CAAC,IAAI,CAAC,CAAA;QAEzC,mCAAmC;QACnC,IAAI,QAAQ,CAAC,CAAC,CAAC,KAAK,SAAS,EAAE,CAAC;YAC9B,QAAQ,CAAC,CAAC,CAAC,GAAG,GAAG,CAAA;QACnB,CAAC;QAED,oCAAoC;QACpC,IAAI,IAAI,CAAC,CAAA;QAET,MAAM,GAAG,GACP,IAAI,CAAC,YAAY,CAAC,EAAE,IAAI,EAAE,QAAQ,EAAE,KAAK,EAAE,IAAI,EAAE,CAAC;YAClD,CAAC,MAAM,IAAI,IAAI,CAAC,IAAI,CAAC,MAAM,KAAK,QAAQ,CAAC,CAAC,CAAC,IAAI,IAAI,CAAC,IAAI,CAAC,MAAM,EAAE,CAAC,CAAC,CAAC,EAAE,CAAC;YACvE,CAAC,IAAI,CAAC,WAAW,CAAC,CAAC,CAAC,QAAQ,IAAI,CAAC,WAAW,CAAC,KAAK,EAAE,CAAC,CAAC,CAAC,EAAE,CAAC,CAAA;QAE5D,OAAO,KAAK;aACT,eAAe,CAAC,QAAQ,EAAE,EAAE,KAAK,EAAE,MAAM,EAAE,IAAI,EAAE,GAAG,EAAE,CAAC;aACvD,IAAI,CAAC,CAAC,CAAC,EAAE,EAAE,CACV,KAAK,CAAC,iBAAiB,CAAC,CAAC,EAAE;YACzB,SAAS,EAAE,CAAC;YACZ,IAAI,EAAE,QAAQ;YACd,KAAK;YACL,MAAM;YACN,IAAI;SACL,CAAC,CACH;aACA,KAAK,CAAC,CAAC,CAAC,EAAE,EAAE,CAAC,OAAO,CAAC,MAAM,CAAC,IAAI,sBAAU,CAAC,CAAC,CAAC,CAAC,CAAC,CAAA;IACpD,CAAC;CACF;AAlCD,6BAkCC","sourcesContent":["/**\n * @packageDocumentation\n * @module Boorus\n */\n\nimport { BooruError } from '../Constants'\nimport type SearchParameters from '../structures/SearchParameters'\nimport type SearchResults from '../structures/SearchResults'\nimport Booru from './Booru'\n\n/**\n * A class designed for Derpibooru\n * >:(\n * @private\n * @extends Booru\n * @inheritDoc\n */\nexport default class Derpibooru extends Booru {\n  /** @inheritDoc */\n  public override search(\n    tags: string[] | string,\n    { limit = 1, random = false, page = 0 }: SearchParameters = {},\n  ): Promise<SearchResults> {\n    const tagArray = this.normalizeTags(tags)\n\n    // For any image, you must supply *\n    if (tagArray[0] === undefined) {\n      tagArray[0] = '*'\n    }\n\n    // Derpibooru offsets the pages by 1\n    page += 1\n\n    const uri =\n      this.getSearchUrl({ tags: tagArray, limit, page }) +\n      (random && this.site.random === 'string' ? `&${this.site.random}` : '') +\n      (this.credentials ? `&key=${this.credentials.token}` : '')\n\n    return super\n      .doSearchRequest(tagArray, { limit, random, page, uri })\n      .then((r) =>\n        super.parseSearchResult(r, {\n          fakeLimit: 0,\n          tags: tagArray,\n          limit,\n          random,\n          page,\n        }),\n      )\n      .catch((e) => Promise.reject(new BooruError(e)))\n  }\n}\n"]}