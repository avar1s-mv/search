{"version":3,"file":"index.js","sourceRoot":"","sources":["../src/index.ts"],"names":[],"mappings":"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","sourcesContent":["/**\n * @packageDocumentation\n * @module Index\n */\n\nimport { deprecate } from 'node:util'\nimport Booru, { type BooruCredentials } from './boorus/Booru'\nimport Derpibooru from './boorus/Derpibooru'\nimport XmlBooru from './boorus/XmlBooru'\nimport { type AnySite, BooruError, sites } from './Constants'\nimport Post from './structures/Post'\nimport type SearchParameters from './structures/SearchParameters'\nimport SearchResults from './structures/SearchResults'\nimport Site from './structures/Site'\nimport type TagListParameters from './structures/TagListParameters'\nimport type TagListResults from './structures/TagListResults'\nimport { resolveSite } from './Utils'\n\nconst BooruTypes: Record<string, typeof Booru> = {\n  derpi: Derpibooru,\n  xml: XmlBooru,\n}\n\nconst booruCache: Partial<Record<AnySite, Booru>> = {}\n\n/**\n * Create a new booru, if special type, use that booru, else use default Booru\n *\n * @param booruSite The site to use\n * @param credentials The credentials to use, if any\n * @return A new booru\n */\nfunction booruFrom(booruSite: Site, credentials?: BooruCredentials): Booru {\n  return new (\n    booruSite.type !== undefined && BooruTypes[booruSite.type]\n      ? BooruTypes[booruSite.type]\n      : Booru\n  )(booruSite, credentials)\n}\n\n/**\n * Create a new booru to search with\n *\n * @constructor\n * @param {String} site The {@link Site} domain (or alias of it) to create a booru from\n * @param {BooruCredentials} credentials The credentials to use on this booru\n * @return {Booru} A booru to use\n */\nfunction booruForSite(site: string, credentials?: BooruCredentials): Booru {\n  const rSite = resolveSite(site)\n\n  if (!rSite) throw new BooruError('Site not supported')\n\n  const booruSite = new Site(sites[rSite])\n\n  // If special type, use that booru, else use default Booru\n  return booruFrom(booruSite, credentials)\n}\n\nexport { booruForSite as forSite }\nexport default booruForSite\n\nexport interface BooruSearch extends SearchParameters {\n  credentials?: BooruCredentials\n}\n\nexport interface BooruTagList extends TagListParameters {\n  credentials?: BooruCredentials\n}\n\n/**\n * Searches a site for images with tags and returns the results\n * @param {String} site The site to search\n * @param {String[]|String} [tags=[]] Tags to search with\n * @param {SearchParameters} [searchOptions={}] The options for searching\n *  if provided (Unused)\n * @return {Promise<SearchResults>} A promise with the images as an array of objects\n *\n * @example\n * ```\n * const Booru = require('booru')\n * // Returns a promise with the latest cute glace pic from e926\n * Booru.search('e926', ['glaceon', 'cute'])\n * ```\n */\nexport function search(\n  site: string,\n  tags: string[] | string = [],\n  { limit = 1, random = false, page = 0, credentials = {} }: BooruSearch = {},\n): Promise<SearchResults> {\n  const rSite = resolveSite(site)\n\n  if (typeof limit === 'string') {\n    limit = Number.parseInt(limit, 10)\n  }\n\n  if (rSite === null) {\n    throw new BooruError('Site not supported')\n  }\n\n  if (!Array.isArray(tags) && typeof tags !== 'string') {\n    throw new BooruError('`tags` should be an array or string')\n  }\n\n  if (typeof limit !== 'number' || Number.isNaN(limit)) {\n    throw new BooruError('`limit` should be an int')\n  }\n\n  const booruSite = new Site(sites[rSite])\n\n  if (!booruCache[rSite]) {\n    booruCache[rSite] = booruFrom(booruSite, credentials)\n  }\n\n  // This is ugly and a hack, I know this\n  booruCache[rSite].credentials = credentials\n  return booruCache[rSite].search(tags, { limit, random, page })\n}\n\n/**\n * Get a list of tags from a site\n * @param {String} site The site to get the tags from\n * @param {TagListParameters} [options={}] The options for the tag list\n * @return {Promise<TagListResults>} A promise with the tags as an array of objects\n *\n * @example\n * ```\n * const Booru = require('booru')\n * // Returns a promise with the first 100 tags from e926\n * Booru.tagList('e926')\n * ```\n */\nexport function tagList(\n  site: string,\n  { limit = 1, page = 0, credentials = {} }: BooruTagList = {},\n): Promise<TagListResults> {\n  const rSite = resolveSite(site)\n\n  if (rSite === null) {\n    throw new BooruError('Site not supported')\n  }\n\n  const booruSite = new Site(sites[rSite])\n\n  if (!booruCache[rSite]) {\n    booruCache[rSite] = booruFrom(booruSite, credentials)\n  }\n\n  booruCache[rSite].credentials = credentials\n  return booruCache[rSite].tagList({ limit, page })\n}\n\nconst deprecatedCommonfy = deprecate(\n  () => {},\n  'Common is now deprecated, just access the properties directly',\n)\n\n/**\n * Deprecated, now a noop\n * <p>This will be removed *soon* please stop using it</p>\n * <p>Just access <code>&lt;{@link Post}&gt;.prop</code>, no need to commonfy anymore\n *\n * @deprecated Just use <code>&lt;{@link Post}&gt;.prop</code> instead\n * @param  {Post[]} images   Array of {@link Post} objects\n * @return {Promise<Post[]>} Array of {@link Post} objects\n */\nexport function commonfy(images: Post[]): Promise<Post[]> {\n  deprecatedCommonfy()\n  return Promise.resolve(images)\n}\n\nexport { Booru as BooruClass } from './boorus/Booru'\nexport { BooruError, sites } from './Constants'\nexport { resolveSite } from './Utils'\nexport { Derpibooru, Post, SearchResults, Site, XmlBooru }\nexport type { BooruCredentials, SearchParameters }\n"]}