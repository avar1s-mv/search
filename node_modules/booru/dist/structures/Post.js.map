{"version":3,"file":"Post.js","sourceRoot":"","sources":["../../src/structures/Post.ts"],"names":[],"mappings":"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","sourcesContent":["/**\n * @packageDocumentation\n * @module Structures\n */\n\nimport { deprecate } from 'node:util'\nimport type Booru from '../boorus/Booru'\n\nconst common = deprecate(\n  () => {},\n  'Common is now deprecated, just access the properties directly',\n)\n\n/**\n * Tries to figure out what the image url should be\n *\n * @param {string} url   why\n * @param {*}      data  boorus\n * @param {Booru}  booru so hard\n */\nfunction parseImageUrl(url: string, data: any, booru: Booru): string | null {\n  let outUrl = url\n\n  // If the image's file_url is *still* undefined or the source is empty or it's deleted\n  // Thanks danbooru *grumble grumble*\n  if (!outUrl || outUrl.trim() === '' || data.is_deleted) {\n    return null\n  }\n\n  if (outUrl.startsWith('/data')) {\n    outUrl = `https://danbooru.donmai.us${outUrl}`\n  }\n\n  if (outUrl.startsWith('/cached')) {\n    outUrl = `https://danbooru.donmai.us${outUrl}`\n  }\n\n  if (outUrl.startsWith('/_images')) {\n    outUrl = `https://dollbooru.org${outUrl}`\n  }\n\n  if (outUrl.startsWith('//derpicdn.net')) {\n    outUrl = `https:${data.image}`\n  }\n\n  if (outUrl.startsWith('/_thumbs')) {\n    outUrl = `https://rule34.paheal.net${outUrl}`\n  }\n\n  // Why???\n  if (!data.file_url && data.directory !== undefined) {\n    // Danbooru-based boorus sometimes sort their files into directories\n    // There's 2 directories, one named after the first 2 characters of the hash\n    // and one named after the next 2 characters of the hash\n    // Sometimes we get it in the API response as `data.directory`, sometimes it's null\n    // for some ungodly reason\n    // I despise the danbooru api honestly\n    const directory =\n      data.directory ?? `${data.hash.substr(0, 2)}/${data.hash.substr(2, 2)}`\n    outUrl = `//${booru.domain}/images/${directory}/${data.image}`\n  }\n\n  if (!outUrl.startsWith('http')) {\n    outUrl = `https:${outUrl}`\n  }\n\n  if (\n    booru.domain === 'xbooru.com' &&\n    outUrl.startsWith('https://api-cdn.rule34.xxx/')\n  ) {\n    outUrl = outUrl.replace(\n      'https://api-cdn.rule34.xxx/',\n      'https://xbooru.com/',\n    )\n  }\n\n  return encodeURI(outUrl)\n}\n\n/**\n * Takes and transforms tags from the booru's api into a common format\n * (which is an array of strings)\n * @param {any} data The data from the booru\n * @returns {string[]} The tags as a string array, and not just a string or an object\n */\nfunction getTags(data: any): string[] {\n  let tags: string[] = []\n\n  if (Array.isArray(data.tags)) {\n    tags = data.tags\n  } else if (data.tags?.general) {\n    tags = Object.values<string>(data.tags).flat()\n  } else if (typeof data.tags === 'string') {\n    tags = fromTagString(data.tags)\n  } else if (typeof data.tag_string === 'string') {\n    tags = fromTagString(data.tag_string)\n  }\n\n  return tags.filter((v) => v !== '')\n}\n\n/**\n * Parses a string of tags into an array of tags, doing some sanitization\n *\n * @example\n * fromTagString('tag1 tag2 tag3') => ['tag1', 'tag2', 'tag3']\n * fromTagString('tag1 tag,2 tag3 ') => ['tag1', 'tag2', 'tag3']\n * @param tags The tags as a string\n * @returns The string, parsed into an array of tags\n */\nfunction fromTagString(tags: string): string[] {\n  return tags.split(' ').map((v) => v.replace(/,/g, ''))\n}\n\n/**\n * An image from a booru with a few common props\n *\n * @example\n * ```\n * Post {\n *  fileUrl: 'https://aaaa.com/image.jpg',\n *  id: '124125',\n *  tags: ['cat', 'cute'],\n *  score: 5,\n *  source: 'https://giraffeduck.com/aaaa.png',\n *  rating: 's'\n * }\n * ```\n */\nexport default class Post {\n  /** The {@link Booru} it came from */\n  public booru: Booru\n  /** The direct link to the file */\n  public fileUrl: string | null\n  /** The height of the file */\n  public height: number\n  /** The width of the file */\n  public width: number\n  /** The url to the medium-sized image (if available) */\n  public sampleUrl: string | null\n  /** The height of the medium-sized image (if available) */\n  public sampleHeight: number | null\n  /** The width of the medium-sized image (if available) */\n  public sampleWidth: number | null\n  /** The url to the smallest image (if available) */\n  public previewUrl: string | null\n  /** The height of the smallest image (if available) */\n  public previewHeight: number | null\n  /** The width of the smallest image (if available) */\n  public previewWidth: number | null\n  /** The id of this post */\n  public id: string\n  /** If this post is available (ie. not deleted, not banned, has file url) */\n  public available: boolean\n  /** The tags of this post */\n  public tags: string[]\n  /** The score of this post */\n  public score: number\n  /** The source of this post, if available */\n  public source?: string | string[]\n  /**\n   * The rating of the image, as just the first letter\n   * (s/q/e/u) => safe/questionable/explicit/unrated\n   */\n  public rating: string\n  /** The Date this post was created at */\n  public createdAt?: Date | null\n  /** All the data given by the booru @private */\n  protected data: any\n\n  /**\n   * Create an image from a booru\n   *\n   * @param {Object} data The raw data from the Booru\n   * @param {Booru} booru The booru that created the image\n   */\n  constructor(data: any, booru: Booru) {\n    // Damn wild mix of boorus\n    this.data = data\n    this.booru = booru\n\n    // Again, thanks danbooru\n    const deletedOrBanned = data.is_deleted || data.is_banned\n\n    this.fileUrl = parseImageUrl(\n      data.file_url ??\n        data.image ??\n        (deletedOrBanned ? data.source : undefined) ??\n        data.file?.url ??\n        data.representations?.full,\n      data,\n      booru,\n    )\n\n    this.available = !deletedOrBanned && this.fileUrl !== null\n\n    this.height = Number.parseInt(\n      data.height ?? data.image_height ?? data.file?.height,\n      10,\n    )\n    this.width = Number.parseInt(\n      data.width ?? data.image_width ?? data.file?.width,\n      10,\n    )\n\n    this.sampleUrl = parseImageUrl(\n      data.sample_url ??\n        data.large_file_url ??\n        data.representations?.large ??\n        data.sample?.url,\n      data,\n      booru,\n    )\n\n    this.sampleHeight = Number.parseInt(\n      data.sample_height ?? data.sample?.height,\n      10,\n    )\n    this.sampleWidth = Number.parseInt(\n      data.sample_width ?? data.sample?.width,\n      10,\n    )\n\n    this.previewUrl = parseImageUrl(\n      data.preview_url ??\n        data.preview_file_url ??\n        data.representations?.small ??\n        data.preview?.url,\n      data,\n      booru,\n    )\n\n    this.previewHeight = Number.parseInt(\n      data.preview_height ?? data.preview?.height,\n      10,\n    )\n    this.previewWidth = Number.parseInt(\n      data.preview_width ?? data.preview?.width,\n      10,\n    )\n\n    this.id = data.id ? data.id.toString() : 'No ID available'\n    this.tags = getTags(data)\n\n    if (data.score && data.score.total !== undefined) {\n      this.score = data.score.total\n    } else {\n      this.score = data.score ? Number.parseInt(data.score, 10) : data.score\n    }\n\n    this.source = data.source ?? data.sources ?? data.source_url\n    this.rating =\n      data.rating ??\n      /(safe|suggestive|questionable|explicit)/i.exec(data.tags) ??\n      'u'\n\n    if (Array.isArray(this.rating)) {\n      this.rating = this.rating[0]\n    }\n\n    // Thanks derpibooru\n    if (this.rating === 'suggestive') {\n      this.rating = 'q'\n    }\n\n    this.rating = this.rating.charAt(0)\n\n    this.createdAt = null\n    // eslint-disable-next-line\n    if (typeof data.created_at === 'object') {\n      this.createdAt = new Date(\n        data.created_at.s * 1000 + data.created_at.n / 1000000000,\n      )\n    } else if (typeof data.created_at === 'number') {\n      this.createdAt = new Date(data.created_at * 1000)\n    } else if (typeof data.created_at === 'string') {\n      this.createdAt = new Date(data.created_at)\n    } else if (typeof data.change === 'number') {\n      this.createdAt = new Date(data.change * 1000)\n    } else {\n      this.createdAt = new Date(data.created_at ?? data.date)\n    }\n  }\n\n  /**\n   * The direct link to the file\n   * <p>It's prefered to use `.fileUrl` instead because camelCase\n   */\n  get file_url(): string | null {\n    return this.fileUrl\n  }\n\n  /**\n   * The url to the medium-sized image (if available)\n   * <p>It's prefered to use `.sampleUrl` instead because camelCase\n   */\n  get sample_url(): string | null {\n    return this.sampleUrl\n  }\n\n  /**\n   * The height of the medium-sized image (if available)\n   * <p>It's prefered to use `.sampleHeight` instead because camelCase\n   */\n  get sample_height(): number | null {\n    return this.sampleHeight\n  }\n\n  /**\n   * The width of the medium-sized image (if available)\n   * <p>It's prefered to use `.sampleWidth` instead because camelCase\n   */\n  get sample_width(): number | null {\n    return this.sampleWidth\n  }\n\n  /**\n   * The url to the smallest image (if available)\n   * <p>It's prefered to use `.previewUrl` instead because camelCase\n   */\n  get preview_url(): string | null {\n    return this.previewUrl\n  }\n\n  /**\n   * The height of the smallest image (if available)\n   * <p>It's prefered to use `.previewHeight` instead because camelCase\n   */\n  get preview_height(): number | null {\n    return this.previewHeight\n  }\n\n  /**\n   * The width of the smallest image (if available)\n   * <p>It's prefered to use `.previewWidth` instead because camelCase\n   */\n  get preview_width(): number | null {\n    return this.previewWidth\n  }\n\n  /**\n   * Get the post view (url to the post) of this image\n   *\n   * @type {String}\n   * @example\n   * ```\n   * const e9 = Booru('e9')\n   * const imgs = e9.search(['cat', 'dog'])\n   *\n   * // Log the post url of the first image\n   * console.log(imgs[0].postView)\n   * ```\n   */\n  get postView(): string {\n    return this.booru.postView(this.id)\n  }\n\n  /**\n   * Get some common props on the image\n   *\n   * @deprecated All common props are now attached directly to the image\n   * @type {Object}\n   *\n   * @example\n   * ```\n   * image.id\n   * // deprecated, use this instead\n   * image.id\n   *\n   * // To access the post's raw data from the booru, do\n   * image._data.id\n   * ```\n   */\n  get common(): this {\n    common()\n    return this\n  }\n}\n"]}