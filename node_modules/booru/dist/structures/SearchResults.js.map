{"version":3,"file":"SearchResults.js","sourceRoot":"","sources":["../../src/structures/SearchResults.ts"],"names":[],"mappings":";AAAA;;;GAGG;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAIH,gDAAiC;AAGjC;;;;;;;;;;;;;;;;;GAiBG;AACH,MAAqB,aAAc,SAAQ,KAAW;IACpD,qCAAqC;IAC9B,KAAK,CAAO;IACnB,8BAA8B;IACvB,IAAI,CAAQ;IACnB,oCAAoC;IACpB,IAAI,CAAU;IAC9B,uCAAuC;IACvB,OAAO,CAAkB;IACzC,wCAAwC;IACxB,KAAK,CAAQ;IAE7B,eAAe;IACf,YACE,KAAa,EACb,IAAc,EACd,OAAyB,EACzB,KAAY;QAEZ,KAAK,CAAC,KAAK,CAAC,MAAM,CAAC,CAAA;QAEnB,KAAK,IAAI,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,KAAK,CAAC,MAAM,EAAE,CAAC,EAAE,EAAE,CAAC;YACtC,IAAI,CAAC,CAAC,CAAC,GAAG,KAAK,CAAC,CAAC,CAAC,CAAA;QACpB,CAAC;QAED,IAAI,CAAC,KAAK,GAAG,KAAK,CAAA;QAClB,IAAI,CAAC,IAAI,GAAG,IAAI,CAAA;QAChB,IAAI,CAAC,OAAO,GAAG,OAAO,CAAA;QACtB,IAAI,CAAC,KAAK,GAAG,KAAK,CAAA;QAClB,IAAI,CAAC,IAAI,GAAG,OAAO,CAAC,CAAC,CAAC,CAAC,OAAO,CAAC,IAAI,IAAI,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAA;IAC/C,CAAC;IAED;;;OAGG;IACH,IAAI,KAAK;QACP,OAAO,IAAI,CAAC,CAAC,CAAC,CAAA;IAChB,CAAC;IAED;;;OAGG;IACH,IAAI,IAAI;QACN,OAAO,IAAI,CAAC,IAAI,CAAC,MAAM,GAAG,CAAC,CAAC,CAAA;IAC9B,CAAC;IAED;;;;OAIG;IACI,QAAQ;QACb,MAAM,IAAI,GAAqB,IAAI,CAAC,OAAO,CAAA;QAC3C,IAAI,CAAC,IAAI,GAAG,IAAI,CAAC,IAAI,GAAG,CAAC,CAAA;QAEzB,OAAO,IAAI,CAAC,KAAK,CAAC,MAAM,CAAC,IAAI,CAAC,IAAI,EAAE,IAAI,CAAC,CAAA;IAC3C,CAAC;IAED;;;;;;;;OAQG;IACI,MAAM,CACX,IAAuB,EACvB,EAAE,MAAM,GAAG,KAAK,EAAE,GAAG,EAAE;QAEvB,MAAM,UAAU,GAAG,KAAK,CAAC,OAAO,CAAC,IAAI,CAAC,CAAC,CAAC,CAAC,IAAI,CAAC,CAAC,CAAC,CAAC,IAAI,CAAC,CAAA;QACtD,MAAM,KAAK,GAAW,EAAE,CAAA;QAExB,KAAK,MAAM,CAAC,IAAI,IAAI,EAAE,CAAC;YACrB,MAAM,CAAC,GAAW,KAAK,CAAC,aAAa,CAAC,UAAU,EAAE,CAAC,CAAC,IAAI,CAAC,CAAC,MAAM,CAAA;YAChE,IAAI,CAAC,CAAC,MAAM,IAAI,CAAC,GAAG,CAAC,CAAC,IAAI,CAAC,MAAM,IAAI,CAAC,KAAK,CAAC,CAAC,EAAE,CAAC;gBAC9C,KAAK,CAAC,IAAI,CAAC,CAAC,CAAC,CAAA;YACf,CAAC;QACH,CAAC;QAED,OAAO,IAAI,aAAa,CAAC,KAAK,EAAE,IAAI,CAAC,IAAI,EAAE,IAAI,CAAC,OAAO,EAAE,IAAI,CAAC,KAAK,CAAC,CAAA;IACtE,CAAC;IAED;;;;OAIG;IACI,SAAS,CAAC,IAAuB;QACtC,OAAO,IAAI,CAAC,MAAM,CAAC,IAAI,EAAE,EAAE,MAAM,EAAE,IAAI,EAAE,CAAC,CAAA;IAC5C,CAAC;CACF;AA9FD,gCA8FC","sourcesContent":["/**\n * @packageDocumentation\n * @module Structures\n */\n\nimport type Booru from '../boorus/Booru'\nimport type Post from '../structures/Post'\nimport * as Utils from '../Utils'\nimport type SearchParameters from './SearchParameters'\n\n/**\n * Represents a page of search results, works like an array of {@link Post}\n * <p> Usable like an array and allows to easily get the next page\n *\n * @example\n * ```\n * const Booru = require('booru')\n * // Safebooru\n * const sb = new Booru('sb')\n *\n * const imgs = await sb.search('cat')\n *\n * // Log the images from the first page, then from the second\n * imgs.forEach(i => console.log(i.postView))\n * const imgs2 = await imgs.nextPage()\n * imgs2.forEach(i => console.log(i.postView))\n * ```\n */\nexport default class SearchResults extends Array<Post> {\n  /** The booru used for this search */\n  public booru: Booru\n  /** The page of this search */\n  public page: number\n  /** The tags used for this search */\n  public readonly tags: string[]\n  /** The options used for this search */\n  public readonly options: SearchParameters\n  /** The posts from this search result */\n  public readonly posts: Post[]\n\n  /** @private */\n  constructor(\n    posts: Post[],\n    tags: string[],\n    options: SearchParameters,\n    booru: Booru,\n  ) {\n    super(posts.length)\n\n    for (let i = 0; i < posts.length; i++) {\n      this[i] = posts[i]\n    }\n\n    this.posts = posts\n    this.tags = tags\n    this.options = options\n    this.booru = booru\n    this.page = options ? (options.page ?? 0) : 0\n  }\n\n  /**\n   * Get the first post in this result set\n   * @return {Post}\n   */\n  get first(): Post {\n    return this[0]\n  }\n\n  /**\n   * Get the last post in this result set\n   * @return {Post}\n   */\n  get last(): Post {\n    return this[this.length - 1]\n  }\n\n  /**\n   * Get the next page\n   * <p>Works like <code>sb.search('cat', {page: 1}); sb.search('cat', {page: 2})</code>\n   * @return {Promise<SearchResults>}\n   */\n  public nextPage(): Promise<SearchResults> {\n    const opts: SearchParameters = this.options\n    opts.page = this.page + 1\n\n    return this.booru.search(this.tags, opts)\n  }\n\n  /**\n   * Create a new SearchResults with just images with the matching tags\n   *\n   * @param {String[]|String} tags The tags (or tag) to search for\n   * @param {Object} options The extra options for the search\n   * @param {Boolean} [options.invert=false] If the results should be inverted and\n   *                                         return images *not* tagged\n   * @return {SearchResults}\n   */\n  public tagged(\n    tags: string[] | string,\n    { invert = false } = {},\n  ): SearchResults {\n    const searchTags = Array.isArray(tags) ? tags : [tags]\n    const posts: Post[] = []\n\n    for (const p of this) {\n      const m: number = Utils.compareArrays(searchTags, p.tags).length\n      if ((!invert && m > 0) || (invert && m === 0)) {\n        posts.push(p)\n      }\n    }\n\n    return new SearchResults(posts, this.tags, this.options, this.booru)\n  }\n\n  /**\n   * Returns a SearchResults with images *not* tagged with any of the specified tags (or tag)\n   * @param {String[]|String} tags The tags (or tag) to blacklist\n   * @return {SearchResults} The results without any images with the specified tags\n   */\n  public blacklist(tags: string[] | string): SearchResults {\n    return this.tagged(tags, { invert: true })\n  }\n}\n"]}