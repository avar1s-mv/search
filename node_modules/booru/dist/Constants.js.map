{"version":3,"file":"Constants.js","sourceRoot":"","sources":["../src/Constants.ts"],"names":[],"mappings":";AAAA;;;GAGG;;;AA6FH,8BAoBC;AAED,gCAaC;AA1HD,mCAAqC;AAErC,MAAM,QAAQ,GAAG,OAAO,CAAC,cAAc,CAAC,CAAA;AACxC,MAAM,WAAW,GAAG,OAAO,CAAC,iBAAiB,CAAC,CAAA;AA2B9C,MAAM,YAAY,GAAY;IAC5B,UAAU,EAAE,iBAAiB;IAC7B,UAAU,EAAE,qBAAqB;IACjC,UAAU,EAAE,aAAa;CAC1B,CAAA;AAED;;GAEG;AACU,QAAA,KAAK,GAAG,QAAqC,CAAA;AAE1D;;;;GAIG;AACH,MAAa,UAAW,SAAQ,KAAK;IACnC,YAAY,OAAuB;QACjC,KAAK,CAAC,OAAO,YAAY,KAAK,CAAC,CAAC,CAAC,OAAO,CAAC,OAAO,CAAC,CAAC,CAAC,OAAO,CAAC,CAAA;QAE3D,IAAI,OAAO,YAAY,KAAK,EAAE,CAAC;YAC7B,IAAI,CAAC,KAAK,GAAG,OAAO,CAAC,KAAK,IAAI,YAAY,CAAA;QAC5C,CAAC;aAAM,CAAC;YACN,KAAK,CAAC,iBAAiB,CAAC,IAAI,EAAE,UAAU,CAAC,CAAA;QAC3C,CAAC;QAED,IAAI,CAAC,IAAI,GAAG,YAAY,CAAA;IAC1B,CAAC;CACF;AAZD,gCAYC;AAED;;;GAGG;AACU,QAAA,UAAU,GAAG,SAAS,WAAW,CAAC,OAAO,0CAA0C,CAAA;AAEhG;;;;;GAKG;AACH,SAAS,UAAU,CAAC,IAAc;IAChC,OAAO,IAAI,CAAC,GAAG,CAAC,CAAC,CAAC,EAAE,EAAE,CAAC,YAAY,CAAC,CAAC,CAAC,WAAW,EAAE,CAAC,IAAI,CAAC,CAAC,CAAA;AAC5D,CAAC;AAED;;;;;;;;;;GAUG;AACH,SAAgB,SAAS,CACvB,IAAU,EACV,OAAiB,EAAE,EACnB,KAAK,GAAG,GAAG,EACX,IAAI,GAAG,CAAC,EACR,cAAgC,EAAE;IAElC,MAAM,KAAK,GAAG,IAAA,mBAAW,EACvB;QACE,CAAC,IAAI,CAAC,QAAQ,CAAC,EAAE,UAAU,CAAC,IAAI,CAAC;QACjC,KAAK;QACL,CAAC,IAAI,CAAC,QAAQ,CAAC,EAAE,IAAI;QACrB,GAAG,WAAW;KACf,EACD;QACE,SAAS,EAAE,IAAI,CAAC,OAAO;KACxB,CACF,CAAA;IAED,OAAO,OAAO,IAAI,CAAC,QAAQ,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,GAAG,MAAM,IAAI,CAAC,MAAM,GAAG,IAAI,CAAC,GAAG,CAAC,MAAM,GAAG,KAAK,EAAE,CAAA;AACrF,CAAC;AAED,SAAgB,UAAU,CACxB,IAAU,EACV,KAAK,GAAG,GAAG,EACX,IAAI,GAAG,CAAC,EACR,cAAgC,EAAE;IAElC,MAAM,KAAK,GAAG,IAAA,mBAAW,EAAC;QACxB,KAAK;QACL,CAAC,IAAI,CAAC,QAAQ,CAAC,EAAE,IAAI;QACrB,GAAG,WAAW;KACf,CAAC,CAAA;IAEF,OAAO,OAAO,IAAI,CAAC,QAAQ,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,GAAG,MAAM,IAAI,CAAC,MAAM,GAAG,IAAI,CAAC,GAAG,CAAC,OAAO,GAAG,KAAK,EAAE,CAAA;AACtF,CAAC;AAED;;;;;GAKG;AACU,QAAA,cAAc,GAAgB;IACzC,OAAO,EAAE;QACP,MAAM,EAAE,oDAAoD;QAC5D,YAAY,EAAE,kBAAU;KACzB;CACF,CAAA","sourcesContent":["/**\n * @packageDocumentation\n * @module Constants\n */\n\nimport type { RequestInit } from 'undici'\nimport type { BooruCredentials } from './boorus/Booru'\nimport type Site from './structures/Site'\nimport type SiteInfo from './structures/SiteInfo'\nimport { querystring } from './Utils'\n\nconst siteJson = require('./sites.json')\nconst packageJson = require('../package.json')\n\nexport type AnySite =\n  | 'e621.net'\n  | 'e926.net'\n  | 'hypnohub.net'\n  | 'danbooru.donmai.us'\n  | 'konachan.com'\n  | 'konachan.net'\n  | 'yande.re'\n  | 'gelbooru.com'\n  | 'rule34.xxx'\n  | 'safebooru.org'\n  | 'tbib.org'\n  | 'xbooru.com'\n  | 'rule34.paheal.net'\n  | 'derpibooru.org'\n  | 'realbooru.com'\n\ntype gelTags = {\n  'rating:e': 'rating:explicit'\n  'rating:q': 'rating:questionable'\n  'rating:s': 'rating:safe'\n\n  [key: string]: string\n}\n\nconst expandedTags: gelTags = {\n  'rating:e': 'rating:explicit',\n  'rating:q': 'rating:questionable',\n  'rating:s': 'rating:safe',\n}\n\n/**\n * A map of site url/{@link SiteInfo}\n */\nexport const sites = siteJson as Record<AnySite, SiteInfo>\n\n/**\n * Custom error type for when the boorus error or for user-side error, not my code (probably)\n * <p>The name of the error is 'BooruError'\n * @type {Error}\n */\nexport class BooruError extends Error {\n  constructor(message: string | Error) {\n    super(message instanceof Error ? message.message : message)\n\n    if (message instanceof Error) {\n      this.stack = message.stack ?? '<No Stack>'\n    } else {\n      Error.captureStackTrace(this, BooruError)\n    }\n\n    this.name = 'BooruError'\n  }\n}\n\n/**\n * The user-agent to use for searches\n * @private\n */\nexport const USER_AGENT = `booru/${packageJson.version} (+https://github.com/AtoraSuunva/booru)`\n\n/**\n * Expands tags based on a simple map, used for gelbooru/safebooru/etc compat :(\n *\n * @private\n * @param {String[]} tags The tags to expand\n */\nfunction expandTags(tags: string[]): string[] {\n  return tags.map((v) => expandedTags[v.toLowerCase()] ?? v)\n}\n\n/**\n * Create a full uri to search with\n *\n * @private\n * @param {string} domain The domain to search\n * @param {Site} site The site to search\n * @param {string[]} [tags=[]] The tags to search for\n * @param {number} [limit=100] The limit for images to return\n * @param {number} [page=0] The page to get\n * @param {BooryCredentials} [credentials] The credentials to use for the search, appended to the querystring\n */\nexport function searchURI(\n  site: Site,\n  tags: string[] = [],\n  limit = 100,\n  page = 0,\n  credentials: BooruCredentials = {},\n): string {\n  const query = querystring(\n    {\n      [site.tagQuery]: expandTags(tags),\n      limit,\n      [site.paginate]: page,\n      ...credentials,\n    },\n    {\n      arrayJoin: site.tagJoin,\n    },\n  )\n\n  return `http${site.insecure ? '' : 's'}://${site.domain}${site.api.search}${query}`\n}\n\nexport function tagListURI(\n  site: Site,\n  limit = 100,\n  page = 0,\n  credentials: BooruCredentials = {},\n): string {\n  const query = querystring({\n    limit,\n    [site.paginate]: page,\n    ...credentials,\n  })\n\n  return `http${site.insecure ? '' : 's'}://${site.domain}${site.api.tagList}${query}`\n}\n\n/**\n * The default options to use for requests\n * <p>I could document this better but meh\n *\n * @private\n */\nexport const defaultOptions: RequestInit = {\n  headers: {\n    Accept: 'application/json, application/xml;q=0.9, */*;q=0.8',\n    'User-Agent': USER_AGENT,\n  },\n}\n"]}